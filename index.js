// Generated by CoffeeScript 1.9.3
(function() {
  var Promise, ROOT_URL, cheerio, request;

  Promise = require("promise");

  request = require("request");

  cheerio = require("cheerio");

  ROOT_URL = "http://tunein.com";

  exports.searchForShow = function(phrase) {
    return new Promise(function(resolve, reject) {
      var podcasts;
      podcasts = [];
      return request(ROOT_URL + "/search?query=" + (encodeURIComponent(phrase)), function(err, resp, body) {
        var $;
        if (err) {
          return reject(err);
        } else {
          $ = cheerio.load(body);
          $("h2:contains(Program) + .group li.guide-item").each(function(pct, p) {
            var podcast, podcast_desc, podcast_link, podcast_name;
            podcast = $(p);
            podcast_name = podcast.find("h3.title").text();
            podcast_desc = podcast.find(".subtitle").text();
            podcast_link = ROOT_URL + podcast.find("a.overlay-hover-trigger").attr("href");
            return podcasts.push({
              name: podcast_name,
              desc: podcast_desc,
              external_link: podcast_link
            });
          });
          return resolve(podcasts);
        }
      });
    });
  };

  exports.getEpisodesOfShow = function(show) {
    return new Promise(function(resolve, reject) {
      return request(show.external_link, function(err, resp, body) {
        var $, episodes;
        if (err) {
          return reject(err);
        } else {
          $ = cheerio.load(body);
          episodes = [];
          $(".topic-pager .topic").each(function(tct, t) {
            var episode_desc, episode_link, episode_name, stream_info_url;
            show = $(t);
            episode_name = show.find(".info h3").text();
            episode_desc = show.find(".topic-description").text();
            episode_link = ROOT_URL + show.find("a.overlay-hover-trigger").attr('href');
            stream_info_url = body.match(/StreamUrl\":\"(.*?),/);
            return episodes.push({
              name: episode_name,
              desc: episode_desc.toString().trim(),
              external_link: episode_link,
              stream_info_url: stream_info_url && stream_info_url[1] || null
            });
          });
          return resolve(episodes);
        }
      });
    });
  };

  exports.getStreamData = function(show) {
    return new Promise(function(resolve, reject) {
      return request(show.stream_info_url, (function(_this) {
        return function(err, resp, body) {
          var data, streams;
          if (err) {
            return reject(err);
          } else {
            data = body.slice(1, body.length - 2);
            if (streams = JSON.parse(data)) {
              return resolve(streams);
            } else {
              return reject();
            }
          }
        };
      })(this));
    });
  };

}).call(this);
